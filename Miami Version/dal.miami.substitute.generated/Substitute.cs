/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class SubstituteSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem SubstituteId = new SchemaItem("SubstituteId", DbType.Int32, true, false, false, true, false, false);
        public static SchemaItem Active = new SchemaItem("Active", DbType.Boolean, false, true, false, false, false, false);
        public static SchemaItem AvailabilityTimeStart = new SchemaItem("AvailabilityTimeStart", DbType.AnsiString, SchemaItemJustify.None, 5, true, false, false, false);
        public static SchemaItem AvailabilityTimeEnd = new SchemaItem("AvailabilityTimeEnd", DbType.AnsiString, SchemaItemJustify.None, 5, true, false, false, false);
        public static SchemaItem AvailabilityWeekDays = new SchemaItem("AvailabilityWeekDays", DbType.AnsiString, SchemaItemJustify.None, 7, true, false, false, false);
        public static SchemaItem GradeId = new SchemaItem("GradeId", DbType.Int32, false, true, false, false, false, false);
        public static SchemaItem UserId = new SchemaItem("UserId", DbType.Int32, false, false, false, false, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(SubstituteSchema.SubstituteId);
                    _entries.Add(SubstituteSchema.Active);
                    _entries.Add(SubstituteSchema.AvailabilityTimeStart);
                    _entries.Add(SubstituteSchema.AvailabilityTimeEnd);
                    _entries.Add(SubstituteSchema.AvailabilityWeekDays);
                    _entries.Add(SubstituteSchema.GradeId);
                    _entries.Add(SubstituteSchema.UserId);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class Substitute : EasyObject
    {

        public Substitute()
        {
            SubstituteSchema _schema = new SubstituteSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="SubstituteId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int SubstituteId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(SubstituteSchema.SubstituteId.FieldName, SubstituteId);

                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetSubstitute", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.SubstituteId.Value = SubstituteId;
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllSubstitute", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddSubstitute";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "SubstituteId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "SubstituteId", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "SubstituteId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "SubstituteId", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateSubstitute";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.SubstituteId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteSubstitute";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.SubstituteId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "Active", DbType.Boolean, "Active", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "AvailabilityTimeStart", DbType.AnsiString, "AvailabilityTimeStart", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "AvailabilityTimeEnd", DbType.AnsiString, "AvailabilityTimeEnd", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "AvailabilityWeekDays", DbType.AnsiString, "AvailabilityWeekDays", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "GradeId", DbType.Int32, "GradeId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "UserId", DbType.Int32, "UserId", DataRowVersion.Current);
        }

        #region Properties
        public virtual int SubstituteId
        {
            get
            {
                return this.GetInteger(SubstituteSchema.SubstituteId.FieldName);
            }
            set
            {
                this.SetInteger(SubstituteSchema.SubstituteId.FieldName, value);
            }
        }
        public virtual bool Active
        {
            get
            {
                return this.GetBoolean(SubstituteSchema.Active.FieldName);
            }
            set
            {
                this.SetBoolean(SubstituteSchema.Active.FieldName, value);
            }
        }
        public virtual string AvailabilityTimeStart
        {
            get
            {
                return this.GetString(SubstituteSchema.AvailabilityTimeStart.FieldName);
            }
            set
            {
                this.SetString(SubstituteSchema.AvailabilityTimeStart.FieldName, value);
            }
        }
        public virtual string AvailabilityTimeEnd
        {
            get
            {
                return this.GetString(SubstituteSchema.AvailabilityTimeEnd.FieldName);
            }
            set
            {
                this.SetString(SubstituteSchema.AvailabilityTimeEnd.FieldName, value);
            }
        }
        public virtual string AvailabilityWeekDays
        {
            get
            {
                return this.GetString(SubstituteSchema.AvailabilityWeekDays.FieldName);
            }
            set
            {
                this.SetString(SubstituteSchema.AvailabilityWeekDays.FieldName, value);
            }
        }
        public virtual int GradeId
        {
            get
            {
                return this.GetInteger(SubstituteSchema.GradeId.FieldName);
            }
            set
            {
                this.SetInteger(SubstituteSchema.GradeId.FieldName, value);
            }
        }
        public virtual int UserId
        {
            get
            {
                return this.GetInteger(SubstituteSchema.UserId.FieldName);
            }
            set
            {
                this.SetInteger(SubstituteSchema.UserId.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "Substitute"; }
        }

        #endregion

        #region String Properties

        public virtual string sSubstituteId
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.SubstituteId.FieldName) ? string.Empty : base.GetIntegerAsString(SubstituteSchema.SubstituteId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.SubstituteId.FieldName);
                else
                    this.SubstituteId = base.SetIntegerAsString(SubstituteSchema.SubstituteId.FieldName, value);
            }
        }

        public virtual string s_Active
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.Active.FieldName) ? string.Empty : base.GetBooleanAsString(SubstituteSchema.Active.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.Active.FieldName);
                else
                    this.Active = base.SetBooleanAsString(SubstituteSchema.Active.FieldName, value);
            }
        }

        public virtual string s_AvailabilityTimeStart
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.AvailabilityTimeStart.FieldName) ? string.Empty : base.GetStringAsString(SubstituteSchema.AvailabilityTimeStart.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.AvailabilityTimeStart.FieldName);
                else
                    this.AvailabilityTimeStart = base.SetStringAsString(SubstituteSchema.AvailabilityTimeStart.FieldName, value);
            }
        }

        public virtual string s_AvailabilityTimeEnd
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.AvailabilityTimeEnd.FieldName) ? string.Empty : base.GetStringAsString(SubstituteSchema.AvailabilityTimeEnd.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.AvailabilityTimeEnd.FieldName);
                else
                    this.AvailabilityTimeEnd = base.SetStringAsString(SubstituteSchema.AvailabilityTimeEnd.FieldName, value);
            }
        }

        public virtual string s_AvailabilityWeekDays
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.AvailabilityWeekDays.FieldName) ? string.Empty : base.GetStringAsString(SubstituteSchema.AvailabilityWeekDays.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.AvailabilityWeekDays.FieldName);
                else
                    this.AvailabilityWeekDays = base.SetStringAsString(SubstituteSchema.AvailabilityWeekDays.FieldName, value);
            }
        }

        public virtual string s_GradeId
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.GradeId.FieldName) ? string.Empty : base.GetIntegerAsString(SubstituteSchema.GradeId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.GradeId.FieldName);
                else
                    this.GradeId = base.SetIntegerAsString(SubstituteSchema.GradeId.FieldName, value);
            }
        }

        public virtual string s_UserId
        {
            get
            {
                return this.IsColumnNull(SubstituteSchema.UserId.FieldName) ? string.Empty : base.GetIntegerAsString(SubstituteSchema.UserId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteSchema.UserId.FieldName);
                else
                    this.UserId = base.SetIntegerAsString(SubstituteSchema.UserId.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter SubstituteId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.SubstituteId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Active
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.Active);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter AvailabilityTimeStart
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.AvailabilityTimeStart);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter AvailabilityTimeEnd
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.AvailabilityTimeEnd);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter AvailabilityWeekDays
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.AvailabilityWeekDays);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter GradeId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.GradeId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter UserId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteSchema.UserId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public WhereParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public WhereParameter AvailabilityTimeStart
            {
                get
                {
                    if (_AvailabilityTimeStart_W == null)
                    {
                        _AvailabilityTimeStart_W = TearOff.AvailabilityTimeStart;
                    }
                    return _AvailabilityTimeStart_W;
                }
            }

            public WhereParameter AvailabilityTimeEnd
            {
                get
                {
                    if (_AvailabilityTimeEnd_W == null)
                    {
                        _AvailabilityTimeEnd_W = TearOff.AvailabilityTimeEnd;
                    }
                    return _AvailabilityTimeEnd_W;
                }
            }

            public WhereParameter AvailabilityWeekDays
            {
                get
                {
                    if (_AvailabilityWeekDays_W == null)
                    {
                        _AvailabilityWeekDays_W = TearOff.AvailabilityWeekDays;
                    }
                    return _AvailabilityWeekDays_W;
                }
            }

            public WhereParameter GradeId
            {
                get
                {
                    if (_GradeId_W == null)
                    {
                        _GradeId_W = TearOff.GradeId;
                    }
                    return _GradeId_W;
                }
            }

            public WhereParameter UserId
            {
                get
                {
                    if (_UserId_W == null)
                    {
                        _UserId_W = TearOff.UserId;
                    }
                    return _UserId_W;
                }
            }

            private WhereParameter _SubstituteId_W = null;
            private WhereParameter _Active_W = null;
            private WhereParameter _AvailabilityTimeStart_W = null;
            private WhereParameter _AvailabilityTimeEnd_W = null;
            private WhereParameter _AvailabilityWeekDays_W = null;
            private WhereParameter _GradeId_W = null;
            private WhereParameter _UserId_W = null;

            public void WhereClauseReset()
            {
                _SubstituteId_W = null;
                _Active_W = null;
                _AvailabilityTimeStart_W = null;
                _AvailabilityTimeEnd_W = null;
                _AvailabilityWeekDays_W = null;
                _GradeId_W = null;
                _UserId_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter SubstituteId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.SubstituteId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Active
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.Active);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter AvailabilityTimeStart
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.AvailabilityTimeStart);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter AvailabilityTimeEnd
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.AvailabilityTimeEnd);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter AvailabilityWeekDays
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.AvailabilityWeekDays);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter GradeId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.GradeId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter UserId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteSchema.UserId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public AggregateParameter Active
            {
                get
                {
                    if (_Active_W == null)
                    {
                        _Active_W = TearOff.Active;
                    }
                    return _Active_W;
                }
            }

            public AggregateParameter AvailabilityTimeStart
            {
                get
                {
                    if (_AvailabilityTimeStart_W == null)
                    {
                        _AvailabilityTimeStart_W = TearOff.AvailabilityTimeStart;
                    }
                    return _AvailabilityTimeStart_W;
                }
            }

            public AggregateParameter AvailabilityTimeEnd
            {
                get
                {
                    if (_AvailabilityTimeEnd_W == null)
                    {
                        _AvailabilityTimeEnd_W = TearOff.AvailabilityTimeEnd;
                    }
                    return _AvailabilityTimeEnd_W;
                }
            }

            public AggregateParameter AvailabilityWeekDays
            {
                get
                {
                    if (_AvailabilityWeekDays_W == null)
                    {
                        _AvailabilityWeekDays_W = TearOff.AvailabilityWeekDays;
                    }
                    return _AvailabilityWeekDays_W;
                }
            }

            public AggregateParameter GradeId
            {
                get
                {
                    if (_GradeId_W == null)
                    {
                        _GradeId_W = TearOff.GradeId;
                    }
                    return _GradeId_W;
                }
            }

            public AggregateParameter UserId
            {
                get
                {
                    if (_UserId_W == null)
                    {
                        _UserId_W = TearOff.UserId;
                    }
                    return _UserId_W;
                }
            }

            private AggregateParameter _SubstituteId_W = null;
            private AggregateParameter _Active_W = null;
            private AggregateParameter _AvailabilityTimeStart_W = null;
            private AggregateParameter _AvailabilityTimeEnd_W = null;
            private AggregateParameter _AvailabilityWeekDays_W = null;
            private AggregateParameter _GradeId_W = null;
            private AggregateParameter _UserId_W = null;

            public void AggregateClauseReset()
            {
                _SubstituteId_W = null;
                _Active_W = null;
                _AvailabilityTimeStart_W = null;
                _AvailabilityTimeEnd_W = null;
                _AvailabilityWeekDays_W = null;
                _GradeId_W = null;
                _UserId_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}