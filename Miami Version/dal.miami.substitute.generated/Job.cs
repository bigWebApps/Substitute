/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.2)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class JobSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem JobId = new SchemaItem("JobId", DbType.Int32, true, false, false, true, true, false);
        public static SchemaItem LocationId = new SchemaItem("LocationId", DbType.Int32, false, true, false, false, false, false);
        public static SchemaItem SubtypeId = new SchemaItem("SubtypeId", DbType.Int32, false, true, false, false, true, false);
        public static SchemaItem Teacher = new SchemaItem("Teacher", DbType.String, SchemaItemJustify.None, 255, true, false, false, false);
        public static SchemaItem GradeId = new SchemaItem("GradeId", DbType.Int32, false, true, false, false, false, false);
        public static SchemaItem StatusId = new SchemaItem("StatusId", DbType.Int32, false, true, false, false, true, false);
        public static SchemaItem DatetimeStart = new SchemaItem("DatetimeStart", DbType.DateTime, false, true, false, false, false, false);
        public static SchemaItem DatetimeEnd = new SchemaItem("DatetimeEnd", DbType.DateTime, false, true, false, false, false, false);
        public static SchemaItem Room = new SchemaItem("Room", DbType.String, SchemaItemJustify.None, 50, true, false, false, false);
        public static SchemaItem Note = new SchemaItem("Note", DbType.String, SchemaItemJustify.None, 255, true, false, false, false);
        public static SchemaItem SubstituteId = new SchemaItem("SubstituteId", DbType.Int32, false, true, false, false, false, false);
        public static SchemaItem Subject = new SchemaItem("Subject", DbType.String, SchemaItemJustify.None, 50, true, false, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(JobSchema.JobId);
                    _entries.Add(JobSchema.LocationId);
                    _entries.Add(JobSchema.SubtypeId);
                    _entries.Add(JobSchema.Teacher);
                    _entries.Add(JobSchema.GradeId);
                    _entries.Add(JobSchema.StatusId);
                    _entries.Add(JobSchema.DatetimeStart);
                    _entries.Add(JobSchema.DatetimeEnd);
                    _entries.Add(JobSchema.Room);
                    _entries.Add(JobSchema.Note);
                    _entries.Add(JobSchema.SubstituteId);
                    _entries.Add(JobSchema.Subject);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class Job : EasyObject
    {

        public Job()
        {
            JobSchema _schema = new JobSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="JobId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int JobId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(JobSchema.JobId.FieldName, JobId);
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetJobOpenedById", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        public bool LoadByPrimaryKeyBase(int JobId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(JobSchema.JobId.FieldName, JobId);
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetJob", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllJob", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddJob";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "JobId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "JobId", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "JobId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "JobId", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateJob";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "JobId", DbType.Int32, "JobId", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.JobId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "JobId", DbType.Int32, "JobId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteJob";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "JobId", DbType.Int32, "JobId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.JobId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "JobId", DbType.Int32, "JobId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "LocationId", DbType.Int32, "LocationId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "SubtypeId", DbType.Int32, "SubtypeId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Teacher", DbType.String, "Teacher", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "GradeId", DbType.Int32, "GradeId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "StatusId", DbType.Int32, "StatusId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "DatetimeStart", DbType.DateTime, "DatetimeStart", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "DatetimeEnd", DbType.DateTime, "DatetimeEnd", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Room", DbType.String, "Room", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Note", DbType.String, "Note", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Subject", DbType.String, "Subject", DataRowVersion.Current);
        }

        #region Properties
        public virtual int JobId
        {
            get
            {
                return this.GetInteger(JobSchema.JobId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.JobId.FieldName, value);
            }
        }
        public virtual int LocationId
        {
            get
            {
                return this.GetInteger(JobSchema.LocationId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.LocationId.FieldName, value);
            }
        }
        public virtual int SubtypeId
        {
            get
            {
                return this.GetInteger(JobSchema.SubtypeId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.SubtypeId.FieldName, value);
            }
        }
        public virtual string Teacher
        {
            get
            {
                return this.GetString(JobSchema.Teacher.FieldName);
            }
            set
            {
                this.SetString(JobSchema.Teacher.FieldName, value);
            }
        }
        public virtual int GradeId
        {
            get
            {
                return this.GetInteger(JobSchema.GradeId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.GradeId.FieldName, value);
            }
        }
        public virtual int StatusId
        {
            get
            {
                return this.GetInteger(JobSchema.StatusId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.StatusId.FieldName, value);
            }
        }
        public virtual DateTime DatetimeStart
        {
            get
            {
                return this.GetDateTime(JobSchema.DatetimeStart.FieldName);
            }
            set
            {
                this.SetDateTime(JobSchema.DatetimeStart.FieldName, value);
            }
        }
        public virtual DateTime DatetimeEnd
        {
            get
            {
                return this.GetDateTime(JobSchema.DatetimeEnd.FieldName);
            }
            set
            {
                this.SetDateTime(JobSchema.DatetimeEnd.FieldName, value);
            }
        }
        public virtual string Room
        {
            get
            {
                return this.GetString(JobSchema.Room.FieldName);
            }
            set
            {
                this.SetString(JobSchema.Room.FieldName, value);
            }
        }
        public virtual string Note
        {
            get
            {
                return this.GetString(JobSchema.Note.FieldName);
            }
            set
            {
                this.SetString(JobSchema.Note.FieldName, value);
            }
        }
        public virtual int SubstituteId
        {
            get
            {
                return this.GetInteger(JobSchema.SubstituteId.FieldName);
            }
            set
            {
                this.SetInteger(JobSchema.SubstituteId.FieldName, value);
            }
        }
        public virtual string Subject
        {
            get
            {
                return this.GetString(JobSchema.Subject.FieldName);
            }
            set
            {
                this.SetString(JobSchema.Subject.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "Job"; }
        }

        #endregion

        #region String Properties

        public virtual string s_JobId
        {
            get
            {
                return this.IsColumnNull(JobSchema.JobId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.JobId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.JobId.FieldName);
                else
                    this.JobId = base.SetIntegerAsString(JobSchema.JobId.FieldName, value);
            }
        }

        public virtual string s_LocationId
        {
            get
            {
                return this.IsColumnNull(JobSchema.LocationId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.LocationId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.LocationId.FieldName);
                else
                    this.LocationId = base.SetIntegerAsString(JobSchema.LocationId.FieldName, value);
            }
        }

        public virtual string s_SubtypeId
        {
            get
            {
                return this.IsColumnNull(JobSchema.SubtypeId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.SubtypeId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.SubtypeId.FieldName);
                else
                    this.SubtypeId = base.SetIntegerAsString(JobSchema.SubtypeId.FieldName, value);
            }
        }

        public virtual string s_Teacher
        {
            get
            {
                return this.IsColumnNull(JobSchema.Teacher.FieldName) ? string.Empty : base.GetStringAsString(JobSchema.Teacher.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.Teacher.FieldName);
                else
                    this.Teacher = base.SetStringAsString(JobSchema.Teacher.FieldName, value);
            }
        }

        public virtual string s_GradeId
        {
            get
            {
                return this.IsColumnNull(JobSchema.GradeId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.GradeId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.GradeId.FieldName);
                else
                    this.GradeId = base.SetIntegerAsString(JobSchema.GradeId.FieldName, value);
            }
        }

        public virtual string s_StatusId
        {
            get
            {
                return this.IsColumnNull(JobSchema.StatusId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.StatusId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.StatusId.FieldName);
                else
                    this.StatusId = base.SetIntegerAsString(JobSchema.StatusId.FieldName, value);
            }
        }

        public virtual string s_DatetimeStart
        {
            get
            {
                return this.IsColumnNull(JobSchema.DatetimeStart.FieldName) ? string.Empty : base.GetDateTimeAsString(JobSchema.DatetimeStart.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.DatetimeStart.FieldName);
                else
                    this.DatetimeStart = base.SetDateTimeAsString(JobSchema.DatetimeStart.FieldName, value);
            }
        }

        public virtual string s_DatetimeEnd
        {
            get
            {
                return this.IsColumnNull(JobSchema.DatetimeEnd.FieldName) ? string.Empty : base.GetDateTimeAsString(JobSchema.DatetimeEnd.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.DatetimeEnd.FieldName);
                else
                    this.DatetimeEnd = base.SetDateTimeAsString(JobSchema.DatetimeEnd.FieldName, value);
            }
        }

        public virtual string s_Room
        {
            get
            {
                return this.IsColumnNull(JobSchema.Room.FieldName) ? string.Empty : base.GetStringAsString(JobSchema.Room.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.Room.FieldName);
                else
                    this.Room = base.SetStringAsString(JobSchema.Room.FieldName, value);
            }
        }

        public virtual string s_Note
        {
            get
            {
                return this.IsColumnNull(JobSchema.Note.FieldName) ? string.Empty : base.GetStringAsString(JobSchema.Note.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.Note.FieldName);
                else
                    this.Note = base.SetStringAsString(JobSchema.Note.FieldName, value);
            }
        }

        public virtual string s_SubstituteId
        {
            get
            {
                return this.IsColumnNull(JobSchema.SubstituteId.FieldName) ? string.Empty : base.GetIntegerAsString(JobSchema.SubstituteId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.SubstituteId.FieldName);
                else
                    this.SubstituteId = base.SetIntegerAsString(JobSchema.SubstituteId.FieldName, value);
            }
        }

        public virtual string s_Subject
        {
            get
            {
                return this.IsColumnNull(JobSchema.Subject.FieldName) ? string.Empty : base.GetStringAsString(JobSchema.Subject.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(JobSchema.Subject.FieldName);
                else
                    this.Subject = base.SetStringAsString(JobSchema.Subject.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter JobId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.JobId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter LocationId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.LocationId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter SubtypeId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.SubtypeId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Teacher
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.Teacher);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter GradeId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.GradeId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter StatusId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.StatusId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter DatetimeStart
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.DatetimeStart);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter DatetimeEnd
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.DatetimeEnd);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Room
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.Room);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Note
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.Note);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter SubstituteId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.SubstituteId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Subject
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(JobSchema.Subject);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter JobId
            {
                get
                {
                    if (_JobId_W == null)
                    {
                        _JobId_W = TearOff.JobId;
                    }
                    return _JobId_W;
                }
            }

            public WhereParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public WhereParameter SubtypeId
            {
                get
                {
                    if (_SubtypeId_W == null)
                    {
                        _SubtypeId_W = TearOff.SubtypeId;
                    }
                    return _SubtypeId_W;
                }
            }

            public WhereParameter Teacher
            {
                get
                {
                    if (_Teacher_W == null)
                    {
                        _Teacher_W = TearOff.Teacher;
                    }
                    return _Teacher_W;
                }
            }

            public WhereParameter GradeId
            {
                get
                {
                    if (_GradeId_W == null)
                    {
                        _GradeId_W = TearOff.GradeId;
                    }
                    return _GradeId_W;
                }
            }

            public WhereParameter StatusId
            {
                get
                {
                    if (_StatusId_W == null)
                    {
                        _StatusId_W = TearOff.StatusId;
                    }
                    return _StatusId_W;
                }
            }

            public WhereParameter DatetimeStart
            {
                get
                {
                    if (_DatetimeStart_W == null)
                    {
                        _DatetimeStart_W = TearOff.DatetimeStart;
                    }
                    return _DatetimeStart_W;
                }
            }

            public WhereParameter DatetimeEnd
            {
                get
                {
                    if (_DatetimeEnd_W == null)
                    {
                        _DatetimeEnd_W = TearOff.DatetimeEnd;
                    }
                    return _DatetimeEnd_W;
                }
            }

            public WhereParameter Room
            {
                get
                {
                    if (_Room_W == null)
                    {
                        _Room_W = TearOff.Room;
                    }
                    return _Room_W;
                }
            }

            public WhereParameter Note
            {
                get
                {
                    if (_Note_W == null)
                    {
                        _Note_W = TearOff.Note;
                    }
                    return _Note_W;
                }
            }

            public WhereParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public WhereParameter Subject
            {
                get
                {
                    if (_Subject_W == null)
                    {
                        _Subject_W = TearOff.Subject;
                    }
                    return _Subject_W;
                }
            }

            private WhereParameter _JobId_W = null;
            private WhereParameter _LocationId_W = null;
            private WhereParameter _SubtypeId_W = null;
            private WhereParameter _Teacher_W = null;
            private WhereParameter _GradeId_W = null;
            private WhereParameter _StatusId_W = null;
            private WhereParameter _DatetimeStart_W = null;
            private WhereParameter _DatetimeEnd_W = null;
            private WhereParameter _Room_W = null;
            private WhereParameter _Note_W = null;
            private WhereParameter _SubstituteId_W = null;
            private WhereParameter _Subject_W = null;

            public void WhereClauseReset()
            {
                _JobId_W = null;
                _LocationId_W = null;
                _SubtypeId_W = null;
                _Teacher_W = null;
                _GradeId_W = null;
                _StatusId_W = null;
                _DatetimeStart_W = null;
                _DatetimeEnd_W = null;
                _Room_W = null;
                _Note_W = null;
                _SubstituteId_W = null;
                _Subject_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter JobId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.JobId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter LocationId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.LocationId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter SubtypeId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.SubtypeId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Teacher
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.Teacher);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter GradeId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.GradeId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter StatusId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.StatusId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter DatetimeStart
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.DatetimeStart);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter DatetimeEnd
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.DatetimeEnd);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Room
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.Room);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Note
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.Note);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter SubstituteId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.SubstituteId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Subject
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(JobSchema.Subject);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter JobId
            {
                get
                {
                    if (_JobId_W == null)
                    {
                        _JobId_W = TearOff.JobId;
                    }
                    return _JobId_W;
                }
            }

            public AggregateParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public AggregateParameter SubtypeId
            {
                get
                {
                    if (_SubtypeId_W == null)
                    {
                        _SubtypeId_W = TearOff.SubtypeId;
                    }
                    return _SubtypeId_W;
                }
            }

            public AggregateParameter Teacher
            {
                get
                {
                    if (_Teacher_W == null)
                    {
                        _Teacher_W = TearOff.Teacher;
                    }
                    return _Teacher_W;
                }
            }

            public AggregateParameter GradeId
            {
                get
                {
                    if (_GradeId_W == null)
                    {
                        _GradeId_W = TearOff.GradeId;
                    }
                    return _GradeId_W;
                }
            }

            public AggregateParameter StatusId
            {
                get
                {
                    if (_StatusId_W == null)
                    {
                        _StatusId_W = TearOff.StatusId;
                    }
                    return _StatusId_W;
                }
            }

            public AggregateParameter DatetimeStart
            {
                get
                {
                    if (_DatetimeStart_W == null)
                    {
                        _DatetimeStart_W = TearOff.DatetimeStart;
                    }
                    return _DatetimeStart_W;
                }
            }

            public AggregateParameter DatetimeEnd
            {
                get
                {
                    if (_DatetimeEnd_W == null)
                    {
                        _DatetimeEnd_W = TearOff.DatetimeEnd;
                    }
                    return _DatetimeEnd_W;
                }
            }

            public AggregateParameter Room
            {
                get
                {
                    if (_Room_W == null)
                    {
                        _Room_W = TearOff.Room;
                    }
                    return _Room_W;
                }
            }

            public AggregateParameter Note
            {
                get
                {
                    if (_Note_W == null)
                    {
                        _Note_W = TearOff.Note;
                    }
                    return _Note_W;
                }
            }

            public AggregateParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public AggregateParameter Subject
            {
                get
                {
                    if (_Subject_W == null)
                    {
                        _Subject_W = TearOff.Subject;
                    }
                    return _Subject_W;
                }
            }

            private AggregateParameter _JobId_W = null;
            private AggregateParameter _LocationId_W = null;
            private AggregateParameter _SubtypeId_W = null;
            private AggregateParameter _Teacher_W = null;
            private AggregateParameter _GradeId_W = null;
            private AggregateParameter _StatusId_W = null;
            private AggregateParameter _DatetimeStart_W = null;
            private AggregateParameter _DatetimeEnd_W = null;
            private AggregateParameter _Room_W = null;
            private AggregateParameter _Note_W = null;
            private AggregateParameter _SubstituteId_W = null;
            private AggregateParameter _Subject_W = null;

            public void AggregateClauseReset()
            {
                _JobId_W = null;
                _LocationId_W = null;
                _SubtypeId_W = null;
                _Teacher_W = null;
                _GradeId_W = null;
                _StatusId_W = null;
                _DatetimeStart_W = null;
                _DatetimeEnd_W = null;
                _Room_W = null;
                _Note_W = null;
                _SubstituteId_W = null;
                _Subject_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}