/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class SubstituteExceptionsSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem SubstituteExceptionsId = new SchemaItem("SubstituteExceptionsId", DbType.Int32, true, false, false, true, false, false);
        public static SchemaItem SubstituteId = new SchemaItem("SubstituteId", DbType.Int32, false, false, false, false, true, false);
        public static SchemaItem DateStart = new SchemaItem("DateStart", DbType.DateTime, false, false, false, false, false, false);
        public static SchemaItem DateEnd = new SchemaItem("DateEnd", DbType.DateTime, false, false, false, false, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(SubstituteExceptionsSchema.SubstituteExceptionsId);
                    _entries.Add(SubstituteExceptionsSchema.SubstituteId);
                    _entries.Add(SubstituteExceptionsSchema.DateStart);
                    _entries.Add(SubstituteExceptionsSchema.DateEnd);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class SubstituteExceptions : EasyObject
    {

        public SubstituteExceptions()
        {
            SubstituteExceptionsSchema _schema = new SubstituteExceptionsSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="SubstituteExceptionsId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int SubstituteExceptionsId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName, SubstituteExceptionsId);

                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetSubstituteExceptions", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.SubstituteExceptionsId.Value = SubstituteExceptionsId;
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllSubstituteExceptions", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddSubstituteExceptions";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "SubstituteExceptionsId", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "SubstituteExceptionsId", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateSubstituteExceptions";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, "SubstituteExceptionsId", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.SubstituteExceptionsId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, "SubstituteExceptionsId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteSubstituteExceptions";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, "SubstituteExceptionsId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.SubstituteExceptionsId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "SubstituteExceptionsId", DbType.Int32, "SubstituteExceptionsId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "SubstituteId", DbType.Int32, "SubstituteId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "DateStart", DbType.DateTime, "DateStart", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "DateEnd", DbType.DateTime, "DateEnd", DataRowVersion.Current);
        }

        #region Properties
        public virtual int SubstituteExceptionsId
        {
            get
            {
                return this.GetInteger(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName);
            }
            set
            {
                this.SetInteger(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName, value);
            }
        }
        public virtual int SubstituteId
        {
            get
            {
                return this.GetInteger(SubstituteExceptionsSchema.SubstituteId.FieldName);
            }
            set
            {
                this.SetInteger(SubstituteExceptionsSchema.SubstituteId.FieldName, value);
            }
        }
        public virtual DateTime DateStart
        {
            get
            {
                return this.GetDateTime(SubstituteExceptionsSchema.DateStart.FieldName);
            }
            set
            {
                this.SetDateTime(SubstituteExceptionsSchema.DateStart.FieldName, value);
            }
        }
        public virtual DateTime DateEnd
        {
            get
            {
                return this.GetDateTime(SubstituteExceptionsSchema.DateEnd.FieldName);
            }
            set
            {
                this.SetDateTime(SubstituteExceptionsSchema.DateEnd.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "SubstituteExceptions"; }
        }

        #endregion

        #region String Properties

        public virtual string sSubstituteExceptionsId
        {
            get
            {
                return this.IsColumnNull(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName) ? string.Empty : base.GetIntegerAsString(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName);
                else
                    this.SubstituteExceptionsId = base.SetIntegerAsString(SubstituteExceptionsSchema.SubstituteExceptionsId.FieldName, value);
            }
        }

        public virtual string s_SubstituteId
        {
            get
            {
                return this.IsColumnNull(SubstituteExceptionsSchema.SubstituteId.FieldName) ? string.Empty : base.GetIntegerAsString(SubstituteExceptionsSchema.SubstituteId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteExceptionsSchema.SubstituteId.FieldName);
                else
                    this.SubstituteId = base.SetIntegerAsString(SubstituteExceptionsSchema.SubstituteId.FieldName, value);
            }
        }

        public virtual string s_DateStart
        {
            get
            {
                return this.IsColumnNull(SubstituteExceptionsSchema.DateStart.FieldName) ? string.Empty : base.GetDateTimeAsString(SubstituteExceptionsSchema.DateStart.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteExceptionsSchema.DateStart.FieldName);
                else
                    this.DateStart = base.SetDateTimeAsString(SubstituteExceptionsSchema.DateStart.FieldName, value);
            }
        }

        public virtual string s_DateEnd
        {
            get
            {
                return this.IsColumnNull(SubstituteExceptionsSchema.DateEnd.FieldName) ? string.Empty : base.GetDateTimeAsString(SubstituteExceptionsSchema.DateEnd.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(SubstituteExceptionsSchema.DateEnd.FieldName);
                else
                    this.DateEnd = base.SetDateTimeAsString(SubstituteExceptionsSchema.DateEnd.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter SubstituteExceptionsId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteExceptionsSchema.SubstituteExceptionsId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter SubstituteId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteExceptionsSchema.SubstituteId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter DateStart
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteExceptionsSchema.DateStart);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter DateEnd
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(SubstituteExceptionsSchema.DateEnd);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter SubstituteExceptionsId
            {
                get
                {
                    if (SubstituteExceptionsId_W == null)
                    {
                        SubstituteExceptionsId_W = TearOff.SubstituteExceptionsId;
                    }
                    return SubstituteExceptionsId_W;
                }
            }

            public WhereParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public WhereParameter DateStart
            {
                get
                {
                    if (_DateStart_W == null)
                    {
                        _DateStart_W = TearOff.DateStart;
                    }
                    return _DateStart_W;
                }
            }

            public WhereParameter DateEnd
            {
                get
                {
                    if (_DateEnd_W == null)
                    {
                        _DateEnd_W = TearOff.DateEnd;
                    }
                    return _DateEnd_W;
                }
            }

            private WhereParameter SubstituteExceptionsId_W = null;
            private WhereParameter _SubstituteId_W = null;
            private WhereParameter _DateStart_W = null;
            private WhereParameter _DateEnd_W = null;

            public void WhereClauseReset()
            {
                SubstituteExceptionsId_W = null;
                _SubstituteId_W = null;
                _DateStart_W = null;
                _DateEnd_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter SubstituteExceptionsId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteExceptionsSchema.SubstituteExceptionsId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter SubstituteId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteExceptionsSchema.SubstituteId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter DateStart
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteExceptionsSchema.DateStart);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter DateEnd
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(SubstituteExceptionsSchema.DateEnd);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter SubstituteExceptionsId
            {
                get
                {
                    if (SubstituteExceptionsId_W == null)
                    {
                        SubstituteExceptionsId_W = TearOff.SubstituteExceptionsId;
                    }
                    return SubstituteExceptionsId_W;
                }
            }

            public AggregateParameter SubstituteId
            {
                get
                {
                    if (_SubstituteId_W == null)
                    {
                        _SubstituteId_W = TearOff.SubstituteId;
                    }
                    return _SubstituteId_W;
                }
            }

            public AggregateParameter DateStart
            {
                get
                {
                    if (_DateStart_W == null)
                    {
                        _DateStart_W = TearOff.DateStart;
                    }
                    return _DateStart_W;
                }
            }

            public AggregateParameter DateEnd
            {
                get
                {
                    if (_DateEnd_W == null)
                    {
                        _DateEnd_W = TearOff.DateEnd;
                    }
                    return _DateEnd_W;
                }
            }

            private AggregateParameter SubstituteExceptionsId_W = null;
            private AggregateParameter _SubstituteId_W = null;
            private AggregateParameter _DateStart_W = null;
            private AggregateParameter _DateEnd_W = null;

            public void AggregateClauseReset()
            {
                SubstituteExceptionsId_W = null;
                _SubstituteId_W = null;
                _DateStart_W = null;
                _DateEnd_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}


