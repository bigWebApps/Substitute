
// Generated by MyGeneration Version # (1.1.5.1)

using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class RegionSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem RegionId = new SchemaItem("RegionId", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 1, true, false, false);
        public static SchemaItem Name = new SchemaItem("Name", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 20, true, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(RegionSchema.RegionId);
                    _entries.Add(RegionSchema.Name);
                }
                return _entries;
            }
        }
    }
    #endregion

    public class Region : EasyObject
    {
        public Region()
        {
            RegionSchema _schema = new RegionSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            return base.Query.Load();
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        #region Properties
        public virtual string RegionId
        {
            get
            {
                return this.GetString(RegionSchema.RegionId.FieldName);
            }
            set
            {
                this.SetString(RegionSchema.RegionId.FieldName, value);
            }
        }
        public virtual string Name
        {
            get
            {
                return this.GetString(RegionSchema.Name.FieldName);
            }
            set
            {
                this.SetString(RegionSchema.Name.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "Region"; }
        }

        #endregion

        #region String Properties

        public virtual string s_RegionId
        {
            get
            {
                return this.IsColumnNull(RegionSchema.RegionId.FieldName) ? string.Empty : base.GetStringAsString(RegionSchema.RegionId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(RegionSchema.RegionId.FieldName);
                else
                    this.RegionId = base.SetStringAsString(RegionSchema.RegionId.FieldName, value);
            }
        }

        public virtual string s_Name
        {
            get
            {
                return this.IsColumnNull(RegionSchema.Name.FieldName) ? string.Empty : base.GetStringAsString(RegionSchema.Name.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(RegionSchema.Name.FieldName);
                else
                    this.Name = base.SetStringAsString(RegionSchema.Name.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter RegionId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(RegionSchema.RegionId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Name
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(RegionSchema.Name);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter RegionId
            {
                get
                {
                    if (_RegionId_W == null)
                    {
                        _RegionId_W = TearOff.RegionId;
                    }
                    return _RegionId_W;
                }
            }

            public WhereParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            private WhereParameter _RegionId_W = null;
            private WhereParameter _Name_W = null;

            public void WhereClauseReset()
            {
                _RegionId_W = null;
                _Name_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter RegionId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(RegionSchema.RegionId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Name
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(RegionSchema.Name);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter RegionId
            {
                get
                {
                    if (_RegionId_W == null)
                    {
                        _RegionId_W = TearOff.RegionId;
                    }
                    return _RegionId_W;
                }
            }

            public AggregateParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            private AggregateParameter _RegionId_W = null;
            private AggregateParameter _Name_W = null;

            public void AggregateClauseReset()
            {
                _RegionId_W = null;
                _Name_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}