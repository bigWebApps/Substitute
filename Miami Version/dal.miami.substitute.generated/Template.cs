/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class TemplateSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem TemplateId = new SchemaItem("TemplateId", DbType.Int32, true, false, false, true, false, false);
        public static SchemaItem Name = new SchemaItem("Name", DbType.String, SchemaItemJustify.None, 255, false, false, false, false);
        public static SchemaItem Header = new SchemaItem("Header", DbType.String, SchemaItemJustify.None, 500, false, false, false, false);
        public static SchemaItem Description = new SchemaItem("Description", DbType.String, SchemaItemJustify.None, 500, true, false, false, false);
        public static SchemaItem Text = new SchemaItem("Text", DbType.String, SchemaItemJustify.None, 2147483647, true, false, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(TemplateSchema.TemplateId);
                    _entries.Add(TemplateSchema.Name);
                    _entries.Add(TemplateSchema.Header);
                    _entries.Add(TemplateSchema.Description);
                    _entries.Add(TemplateSchema.Text);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class Template : EasyObject
    {

        public Template()
        {
            TemplateSchema _schema = new TemplateSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="TemplateId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int TemplateId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(TemplateSchema.TemplateId.FieldName, TemplateId);

                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetTemplate", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.TemplateId.Value = TemplateId;
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllTemplate", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddTemplate";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "TemplateId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "TemplateId", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "TemplateId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "TemplateId", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateTemplate";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "TemplateId", DbType.Int32, "TemplateId", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.TemplateId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "TemplateId", DbType.Int32, "TemplateId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteTemplate";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "TemplateId", DbType.Int32, "TemplateId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.TemplateId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "TemplateId", DbType.Int32, "TemplateId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "Name", DbType.String, "Name", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Header", DbType.String, "Header", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Description", DbType.String, "Description", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Text", DbType.String, "Text", DataRowVersion.Current);
        }

        #region Properties
        public virtual int TemplateId
        {
            get
            {
                return this.GetInteger(TemplateSchema.TemplateId.FieldName);
            }
            set
            {
                this.SetInteger(TemplateSchema.TemplateId.FieldName, value);
            }
        }
        public virtual string Name
        {
            get
            {
                return this.GetString(TemplateSchema.Name.FieldName);
            }
            set
            {
                this.SetString(TemplateSchema.Name.FieldName, value);
            }
        }
        public virtual string Header
        {
            get
            {
                return this.GetString(TemplateSchema.Header.FieldName);
            }
            set
            {
                this.SetString(TemplateSchema.Header.FieldName, value);
            }
        }
        public virtual string Description
        {
            get
            {
                return this.GetString(TemplateSchema.Description.FieldName);
            }
            set
            {
                this.SetString(TemplateSchema.Description.FieldName, value);
            }
        }
        public virtual string Text
        {
            get
            {
                return this.GetString(TemplateSchema.Text.FieldName);
            }
            set
            {
                this.SetString(TemplateSchema.Text.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "Template"; }
        }

        #endregion

        #region String Properties

        public virtual string s_TemplateId
        {
            get
            {
                return this.IsColumnNull(TemplateSchema.TemplateId.FieldName) ? string.Empty : base.GetIntegerAsString(TemplateSchema.TemplateId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(TemplateSchema.TemplateId.FieldName);
                else
                    this.TemplateId = base.SetIntegerAsString(TemplateSchema.TemplateId.FieldName, value);
            }
        }

        public virtual string s_Name
        {
            get
            {
                return this.IsColumnNull(TemplateSchema.Name.FieldName) ? string.Empty : base.GetStringAsString(TemplateSchema.Name.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(TemplateSchema.Name.FieldName);
                else
                    this.Name = base.SetStringAsString(TemplateSchema.Name.FieldName, value);
            }
        }

        public virtual string s_Header
        {
            get
            {
                return this.IsColumnNull(TemplateSchema.Header.FieldName) ? string.Empty : base.GetStringAsString(TemplateSchema.Header.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(TemplateSchema.Header.FieldName);
                else
                    this.Header = base.SetStringAsString(TemplateSchema.Header.FieldName, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(TemplateSchema.Description.FieldName) ? string.Empty : base.GetStringAsString(TemplateSchema.Description.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(TemplateSchema.Description.FieldName);
                else
                    this.Description = base.SetStringAsString(TemplateSchema.Description.FieldName, value);
            }
        }

        public virtual string s_Text
        {
            get
            {
                return this.IsColumnNull(TemplateSchema.Text.FieldName) ? string.Empty : base.GetStringAsString(TemplateSchema.Text.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(TemplateSchema.Text.FieldName);
                else
                    this.Text = base.SetStringAsString(TemplateSchema.Text.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter TemplateId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(TemplateSchema.TemplateId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Name
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(TemplateSchema.Name);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Header
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(TemplateSchema.Header);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(TemplateSchema.Description);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Text
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(TemplateSchema.Text);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter TemplateId
            {
                get
                {
                    if (_TemplateId_W == null)
                    {
                        _TemplateId_W = TearOff.TemplateId;
                    }
                    return _TemplateId_W;
                }
            }

            public WhereParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public WhereParameter Header
            {
                get
                {
                    if (_Header_W == null)
                    {
                        _Header_W = TearOff.Header;
                    }
                    return _Header_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter Text
            {
                get
                {
                    if (_Text_W == null)
                    {
                        _Text_W = TearOff.Text;
                    }
                    return _Text_W;
                }
            }

            private WhereParameter _TemplateId_W = null;
            private WhereParameter _Name_W = null;
            private WhereParameter _Header_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _Text_W = null;

            public void WhereClauseReset()
            {
                _TemplateId_W = null;
                _Name_W = null;
                _Header_W = null;
                _Description_W = null;
                _Text_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter TemplateId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(TemplateSchema.TemplateId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Name
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(TemplateSchema.Name);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Header
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(TemplateSchema.Header);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(TemplateSchema.Description);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Text
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(TemplateSchema.Text);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter TemplateId
            {
                get
                {
                    if (_TemplateId_W == null)
                    {
                        _TemplateId_W = TearOff.TemplateId;
                    }
                    return _TemplateId_W;
                }
            }

            public AggregateParameter Name
            {
                get
                {
                    if (_Name_W == null)
                    {
                        _Name_W = TearOff.Name;
                    }
                    return _Name_W;
                }
            }

            public AggregateParameter Header
            {
                get
                {
                    if (_Header_W == null)
                    {
                        _Header_W = TearOff.Header;
                    }
                    return _Header_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter Text
            {
                get
                {
                    if (_Text_W == null)
                    {
                        _Text_W = TearOff.Text;
                    }
                    return _Text_W;
                }
            }

            private AggregateParameter _TemplateId_W = null;
            private AggregateParameter _Name_W = null;
            private AggregateParameter _Header_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _Text_W = null;

            public void AggregateClauseReset()
            {
                _TemplateId_W = null;
                _Name_W = null;
                _Header_W = null;
                _Description_W = null;
                _Text_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}