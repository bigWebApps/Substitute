
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Collections;
using System.Collections.Specialized;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class UserProfileSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem UserProfileId = new SchemaItem("UserProfileId", DbType.Int32, false, true, false, false, false);
        public static SchemaItem UserId = new SchemaItem("UserId", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 6, false, false, false);
        public static SchemaItem Phone = new SchemaItem("Phone", DbType.AnsiString, SchemaItemJustify.None, 14, true, false, false);
        public static SchemaItem Email = new SchemaItem("Email", DbType.AnsiString, SchemaItemJustify.None, 255, true, false, false);
        public static SchemaItem Address = new SchemaItem("Address", DbType.AnsiString, SchemaItemJustify.None, 31, true, false, false);
        public static SchemaItem Address2 = new SchemaItem("Address2", DbType.AnsiString, SchemaItemJustify.None, 28, true, false, false);
        public static SchemaItem APPENDAGE = new SchemaItem("APPENDAGE", DbType.AnsiString, SchemaItemJustify.None, 3, true, false, false);
        public static SchemaItem BirthDate = new SchemaItem("BirthDate", DbType.DateTime, false, true, false, false, false);
        public static SchemaItem JobPosition = new SchemaItem("JobPosition", DbType.AnsiStringFixedLength, SchemaItemJustify.None, 4, true, false, false);
        public static SchemaItem JobAssignmentDescription = new SchemaItem("JobAssignmentDescription", DbType.AnsiString, SchemaItemJustify.None, 50, true, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(UserProfileSchema.UserProfileId);
                    _entries.Add(UserProfileSchema.UserId);
                    _entries.Add(UserProfileSchema.Phone);
                    _entries.Add(UserProfileSchema.Email);
                    _entries.Add(UserProfileSchema.Address);
                    _entries.Add(UserProfileSchema.Address2);
                    _entries.Add(UserProfileSchema.APPENDAGE);
                    _entries.Add(UserProfileSchema.BirthDate);
                    _entries.Add(UserProfileSchema.JobPosition);
                    _entries.Add(UserProfileSchema.JobAssignmentDescription);
                }
                return _entries;
            }
        }
    }
    #endregion

    public class UserProfile : EasyObject
    {
        public UserProfile()
        {
            UserProfileSchema _schema = new UserProfileSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            return base.Query.Load();
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        #region Properties
        public virtual int UserProfileId
        {
            get
            {
                return this.GetInteger(UserProfileSchema.UserProfileId.FieldName);
            }
            set
            {
                this.SetInteger(UserProfileSchema.UserProfileId.FieldName, value);
            }
        }
        public virtual string UserId
        {
            get
            {
                return this.GetString(UserProfileSchema.UserId.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.UserId.FieldName, value);
            }
        }
        public virtual string Phone
        {
            get
            {
                return this.GetString(UserProfileSchema.Phone.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.Phone.FieldName, value);
            }
        }
        public virtual string Email
        {
            get
            {
                return this.GetString(UserProfileSchema.Email.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.Email.FieldName, value);
            }
        }
        public virtual string Address
        {
            get
            {
                return this.GetString(UserProfileSchema.Address.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.Address.FieldName, value);
            }
        }
        public virtual string Address2
        {
            get
            {
                return this.GetString(UserProfileSchema.Address2.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.Address2.FieldName, value);
            }
        }
        public virtual string APPENDAGE
        {
            get
            {
                return this.GetString(UserProfileSchema.APPENDAGE.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.APPENDAGE.FieldName, value);
            }
        }
        public virtual DateTime BirthDate
        {
            get
            {
                return this.GetDateTime(UserProfileSchema.BirthDate.FieldName);
            }
            set
            {
                this.SetDateTime(UserProfileSchema.BirthDate.FieldName, value);
            }
        }
        public virtual string JobPosition
        {
            get
            {
                return this.GetString(UserProfileSchema.JobPosition.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.JobPosition.FieldName, value);
            }
        }
        public virtual string JobAssignmentDescription
        {
            get
            {
                return this.GetString(UserProfileSchema.JobAssignmentDescription.FieldName);
            }
            set
            {
                this.SetString(UserProfileSchema.JobAssignmentDescription.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "UserProfile"; }
        }

        #endregion

        #region String Properties

        public virtual string s_UserProfileId
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.UserProfileId.FieldName) ? string.Empty : base.GetIntegerAsString(UserProfileSchema.UserProfileId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.UserProfileId.FieldName);
                else
                    this.UserProfileId = base.SetIntegerAsString(UserProfileSchema.UserProfileId.FieldName, value);
            }
        }

        public virtual string s_UserId
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.UserId.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.UserId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.UserId.FieldName);
                else
                    this.UserId = base.SetStringAsString(UserProfileSchema.UserId.FieldName, value);
            }
        }

        public virtual string s_Phone
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.Phone.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.Phone.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.Phone.FieldName);
                else
                    this.Phone = base.SetStringAsString(UserProfileSchema.Phone.FieldName, value);
            }
        }

        public virtual string s_Email
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.Email.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.Email.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.Email.FieldName);
                else
                    this.Email = base.SetStringAsString(UserProfileSchema.Email.FieldName, value);
            }
        }

        public virtual string s_Address
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.Address.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.Address.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.Address.FieldName);
                else
                    this.Address = base.SetStringAsString(UserProfileSchema.Address.FieldName, value);
            }
        }

        public virtual string s_Address2
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.Address2.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.Address2.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.Address2.FieldName);
                else
                    this.Address2 = base.SetStringAsString(UserProfileSchema.Address2.FieldName, value);
            }
        }

        public virtual string s_APPENDAGE
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.APPENDAGE.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.APPENDAGE.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.APPENDAGE.FieldName);
                else
                    this.APPENDAGE = base.SetStringAsString(UserProfileSchema.APPENDAGE.FieldName, value);
            }
        }

        public virtual string s_BirthDate
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.BirthDate.FieldName) ? string.Empty : base.GetDateTimeAsString(UserProfileSchema.BirthDate.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.BirthDate.FieldName);
                else
                    this.BirthDate = base.SetDateTimeAsString(UserProfileSchema.BirthDate.FieldName, value);
            }
        }

        public virtual string s_JobPosition
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.JobPosition.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.JobPosition.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.JobPosition.FieldName);
                else
                    this.JobPosition = base.SetStringAsString(UserProfileSchema.JobPosition.FieldName, value);
            }
        }

        public virtual string s_JobAssignmentDescription
        {
            get
            {
                return this.IsColumnNull(UserProfileSchema.JobAssignmentDescription.FieldName) ? string.Empty : base.GetStringAsString(UserProfileSchema.JobAssignmentDescription.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(UserProfileSchema.JobAssignmentDescription.FieldName);
                else
                    this.JobAssignmentDescription = base.SetStringAsString(UserProfileSchema.JobAssignmentDescription.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter UserProfileId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.UserProfileId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter UserId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.UserId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Phone
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.Phone);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Email
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.Email);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Address
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.Address);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Address2
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.Address2);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter APPENDAGE
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.APPENDAGE);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter BirthDate
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.BirthDate);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter JobPosition
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.JobPosition);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter JobAssignmentDescription
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(UserProfileSchema.JobAssignmentDescription);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter UserProfileId
            {
                get
                {
                    if (_UserProfileId_W == null)
                    {
                        _UserProfileId_W = TearOff.UserProfileId;
                    }
                    return _UserProfileId_W;
                }
            }

            public WhereParameter UserId
            {
                get
                {
                    if (_UserId_W == null)
                    {
                        _UserId_W = TearOff.UserId;
                    }
                    return _UserId_W;
                }
            }

            public WhereParameter Phone
            {
                get
                {
                    if (_Phone_W == null)
                    {
                        _Phone_W = TearOff.Phone;
                    }
                    return _Phone_W;
                }
            }

            public WhereParameter Email
            {
                get
                {
                    if (_Email_W == null)
                    {
                        _Email_W = TearOff.Email;
                    }
                    return _Email_W;
                }
            }

            public WhereParameter Address
            {
                get
                {
                    if (_Address_W == null)
                    {
                        _Address_W = TearOff.Address;
                    }
                    return _Address_W;
                }
            }

            public WhereParameter Address2
            {
                get
                {
                    if (_Address2_W == null)
                    {
                        _Address2_W = TearOff.Address2;
                    }
                    return _Address2_W;
                }
            }

            public WhereParameter APPENDAGE
            {
                get
                {
                    if (_APPENDAGE_W == null)
                    {
                        _APPENDAGE_W = TearOff.APPENDAGE;
                    }
                    return _APPENDAGE_W;
                }
            }

            public WhereParameter BirthDate
            {
                get
                {
                    if (_BirthDate_W == null)
                    {
                        _BirthDate_W = TearOff.BirthDate;
                    }
                    return _BirthDate_W;
                }
            }

            public WhereParameter JobPosition
            {
                get
                {
                    if (_JobPosition_W == null)
                    {
                        _JobPosition_W = TearOff.JobPosition;
                    }
                    return _JobPosition_W;
                }
            }

            public WhereParameter JobAssignmentDescription
            {
                get
                {
                    if (_JobAssignmentDescription_W == null)
                    {
                        _JobAssignmentDescription_W = TearOff.JobAssignmentDescription;
                    }
                    return _JobAssignmentDescription_W;
                }
            }

            private WhereParameter _UserProfileId_W = null;
            private WhereParameter _UserId_W = null;
            private WhereParameter _Phone_W = null;
            private WhereParameter _Email_W = null;
            private WhereParameter _Address_W = null;
            private WhereParameter _Address2_W = null;
            private WhereParameter _APPENDAGE_W = null;
            private WhereParameter _BirthDate_W = null;
            private WhereParameter _JobPosition_W = null;
            private WhereParameter _JobAssignmentDescription_W = null;

            public void WhereClauseReset()
            {
                _UserProfileId_W = null;
                _UserId_W = null;
                _Phone_W = null;
                _Email_W = null;
                _Address_W = null;
                _Address2_W = null;
                _APPENDAGE_W = null;
                _BirthDate_W = null;
                _JobPosition_W = null;
                _JobAssignmentDescription_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter UserProfileId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.UserProfileId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter UserId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.UserId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Phone
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.Phone);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Email
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.Email);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Address
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.Address);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Address2
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.Address2);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter APPENDAGE
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.APPENDAGE);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter BirthDate
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.BirthDate);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter JobPosition
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.JobPosition);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter JobAssignmentDescription
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(UserProfileSchema.JobAssignmentDescription);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter UserProfileId
            {
                get
                {
                    if (_UserProfileId_W == null)
                    {
                        _UserProfileId_W = TearOff.UserProfileId;
                    }
                    return _UserProfileId_W;
                }
            }

            public AggregateParameter UserId
            {
                get
                {
                    if (_UserId_W == null)
                    {
                        _UserId_W = TearOff.UserId;
                    }
                    return _UserId_W;
                }
            }

            public AggregateParameter Phone
            {
                get
                {
                    if (_Phone_W == null)
                    {
                        _Phone_W = TearOff.Phone;
                    }
                    return _Phone_W;
                }
            }

            public AggregateParameter Email
            {
                get
                {
                    if (_Email_W == null)
                    {
                        _Email_W = TearOff.Email;
                    }
                    return _Email_W;
                }
            }

            public AggregateParameter Address
            {
                get
                {
                    if (_Address_W == null)
                    {
                        _Address_W = TearOff.Address;
                    }
                    return _Address_W;
                }
            }

            public AggregateParameter Address2
            {
                get
                {
                    if (_Address2_W == null)
                    {
                        _Address2_W = TearOff.Address2;
                    }
                    return _Address2_W;
                }
            }

            public AggregateParameter APPENDAGE
            {
                get
                {
                    if (_APPENDAGE_W == null)
                    {
                        _APPENDAGE_W = TearOff.APPENDAGE;
                    }
                    return _APPENDAGE_W;
                }
            }

            public AggregateParameter BirthDate
            {
                get
                {
                    if (_BirthDate_W == null)
                    {
                        _BirthDate_W = TearOff.BirthDate;
                    }
                    return _BirthDate_W;
                }
            }

            public AggregateParameter JobPosition
            {
                get
                {
                    if (_JobPosition_W == null)
                    {
                        _JobPosition_W = TearOff.JobPosition;
                    }
                    return _JobPosition_W;
                }
            }

            public AggregateParameter JobAssignmentDescription
            {
                get
                {
                    if (_JobAssignmentDescription_W == null)
                    {
                        _JobAssignmentDescription_W = TearOff.JobAssignmentDescription;
                    }
                    return _JobAssignmentDescription_W;
                }
            }

            private AggregateParameter _UserProfileId_W = null;
            private AggregateParameter _UserId_W = null;
            private AggregateParameter _Phone_W = null;
            private AggregateParameter _Email_W = null;
            private AggregateParameter _Address_W = null;
            private AggregateParameter _Address2_W = null;
            private AggregateParameter _APPENDAGE_W = null;
            private AggregateParameter _BirthDate_W = null;
            private AggregateParameter _JobPosition_W = null;
            private AggregateParameter _JobAssignmentDescription_W = null;

            public void AggregateClauseReset()
            {
                _UserProfileId_W = null;
                _UserId_W = null;
                _Phone_W = null;
                _Email_W = null;
                _Address_W = null;
                _Address2_W = null;
                _APPENDAGE_W = null;
                _BirthDate_W = null;
                _JobPosition_W = null;
                _JobAssignmentDescription_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}
