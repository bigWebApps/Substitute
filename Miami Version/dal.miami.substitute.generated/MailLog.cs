/*
'===============================================================================
'  Generated From - CSharp_EasyObject_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.Common;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using NCI.EasyObjects;

namespace Miami.Substitute.Dal.Generated
{

    #region Schema

    public class MailLogSchema : NCI.EasyObjects.Schema
    {
        private static ArrayList _entries;
        public static SchemaItem MailLogId = new SchemaItem("MailLogId", DbType.Int32, true, false, false, true, false, false);
        public static SchemaItem LocationId = new SchemaItem("LocationId", DbType.Int32, false, false, false, false, false, false);
        public static SchemaItem SendDate = new SchemaItem("SendDate", DbType.DateTime, false, false, false, false, false, false);
        public static SchemaItem MailTo = new SchemaItem("MailTo", DbType.String, SchemaItemJustify.None, 5000, true, false, false, false);
        public static SchemaItem MailFrom = new SchemaItem("MailFrom", DbType.String, SchemaItemJustify.None, 5000, true, false, false, false);
        public static SchemaItem Subject = new SchemaItem("Subject", DbType.String, SchemaItemJustify.None, 500, true, false, false, false);
        public static SchemaItem Message = new SchemaItem("Message", DbType.String, SchemaItemJustify.None, 2147483647, true, false, false, false);
        public static SchemaItem MailType = new SchemaItem("MailType", DbType.String, SchemaItemJustify.None, 255, true, false, false, false);

        public override ArrayList SchemaEntries
        {
            get
            {
                if (_entries == null)
                {
                    _entries = new ArrayList();
                    _entries.Add(MailLogSchema.MailLogId);
                    _entries.Add(MailLogSchema.LocationId);
                    _entries.Add(MailLogSchema.SendDate);
                    _entries.Add(MailLogSchema.MailTo);
                    _entries.Add(MailLogSchema.MailFrom);
                    _entries.Add(MailLogSchema.Subject);
                    _entries.Add(MailLogSchema.Message);
                    _entries.Add(MailLogSchema.MailType);
                }
                return _entries;
            }
        }
    }
    #endregion

    public abstract class MailLog : EasyObject
    {

        public MailLog()
        {
            MailLogSchema _schema = new MailLogSchema();
            this.SchemaEntries = _schema.SchemaEntries;
            this.SchemaGlobal = "dbo";
        }

        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        /// <summary>
        /// Loads the business object with info from the database, based on the requested primary key.
        /// </summary>
        /// <param name="MailLogId"></param>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadByPrimaryKey(int MailLogId)
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    ListDictionary parameters = new ListDictionary();

                    // Add in parameters
                    parameters.Add(MailLogSchema.MailLogId.FieldName, MailLogId);

                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetMailLog", parameters, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.MailLogId.Value = MailLogId;
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Loads all records from the table.
        /// </summary>
        /// <returns>A Boolean indicating success or failure of the query</returns>
        public bool LoadAll()
        {
            switch (this.DefaultCommandType)
            {
                case CommandType.StoredProcedure:
                    return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllMailLog", null, CommandType.StoredProcedure);

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    return this.Query.Load();

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        /// <summary>
        /// Adds a new record to the internal table.
        /// </summary>
        public override void AddNew()
        {
            base.AddNew();
        }

        protected override DbCommand GetInsertCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddMailLog";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddParameter(dbCommand, "MailLogId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "MailLogId", DataRowVersion.Default, Convert.DBNull);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddInsertColumn(item);
                        }
                    }
                    dbCommand = this.Query.GetInsertCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddParameter(dbCommand, "MailLogId", DbType.Int32, 0, ParameterDirection.Output, true, 0, 0, "MailLogId", DataRowVersion.Default, Convert.DBNull);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetUpdateCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateMailLog";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);

                    db.AddInParameter(dbCommand, "MailLogId", DbType.Int32, "MailLogId", DataRowVersion.Current);
                    CreateParameters(db, dbCommand);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    foreach (SchemaItem item in this.SchemaEntries)
                    {
                        if (!(item.IsAutoKey || item.IsComputed))
                        {
                            this.Query.AddUpdateColumn(item);
                        }
                    }

                    this.Where.WhereClauseReset();
                    this.Where.MailLogId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetUpdateCommandWrapper();

                    dbCommand.Parameters.Clear();
                    CreateParameters(db, dbCommand);
                    db.AddInParameter(dbCommand, "MailLogId", DbType.Int32, "MailLogId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        protected override DbCommand GetDeleteCommand(CommandType commandType)
        {
            DbCommand dbCommand;

            // Create the Database object, using the default database service. The
            // default database service is determined through configuration.
            Database db = GetDatabase();

            switch (commandType)
            {
                case CommandType.StoredProcedure:
                    string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteMailLog";
                    dbCommand = db.GetStoredProcCommand(sqlCommand);
                    db.AddInParameter(dbCommand, "MailLogId", DbType.Int32, "MailLogId", DataRowVersion.Current);

                    return dbCommand;

                case CommandType.Text:
                    this.Query.ClearAll();
                    this.Where.WhereClauseReset();
                    this.Where.MailLogId.Operator = WhereParameter.Operand.Equal;
                    dbCommand = this.Query.GetDeleteCommandWrapper();

                    dbCommand.Parameters.Clear();
                    db.AddInParameter(dbCommand, "MailLogId", DbType.Int32, "MailLogId", DataRowVersion.Current);

                    return dbCommand;

                default:
                    throw new ArgumentException("Invalid CommandType", "commandType");
            }
        }

        private void CreateParameters(Database db, DbCommand dbCommand)
        {
            db.AddInParameter(dbCommand, "LocationId", DbType.Int32, "LocationId", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "SendDate", DbType.DateTime, "SendDate", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "MailTo", DbType.String, "MailTo", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "MailFrom", DbType.String, "MailFrom", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Subject", DbType.String, "Subject", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "Message", DbType.String, "Message", DataRowVersion.Current);
            db.AddInParameter(dbCommand, "MailType", DbType.String, "MailType", DataRowVersion.Current);
        }

        #region Properties
        public virtual int MailLogId
        {
            get
            {
                return this.GetInteger(MailLogSchema.MailLogId.FieldName);
            }
            set
            {
                this.SetInteger(MailLogSchema.MailLogId.FieldName, value);
            }
        }
        public virtual int LocationId
        {
            get
            {
                return this.GetInteger(MailLogSchema.LocationId.FieldName);
            }
            set
            {
                this.SetInteger(MailLogSchema.LocationId.FieldName, value);
            }
        }
        public virtual DateTime SendDate
        {
            get
            {
                return this.GetDateTime(MailLogSchema.SendDate.FieldName);
            }
            set
            {
                this.SetDateTime(MailLogSchema.SendDate.FieldName, value);
            }
        }
        public virtual string MailTo
        {
            get
            {
                return this.GetString(MailLogSchema.MailTo.FieldName);
            }
            set
            {
                this.SetString(MailLogSchema.MailTo.FieldName, value);
            }
        }
        public virtual string MailFrom
        {
            get
            {
                return this.GetString(MailLogSchema.MailFrom.FieldName);
            }
            set
            {
                this.SetString(MailLogSchema.MailFrom.FieldName, value);
            }
        }
        public virtual string Subject
        {
            get
            {
                return this.GetString(MailLogSchema.Subject.FieldName);
            }
            set
            {
                this.SetString(MailLogSchema.Subject.FieldName, value);
            }
        }
        public virtual string Message
        {
            get
            {
                return this.GetString(MailLogSchema.Message.FieldName);
            }
            set
            {
                this.SetString(MailLogSchema.Message.FieldName, value);
            }
        }
        public virtual string MailType
        {
            get
            {
                return this.GetString(MailLogSchema.MailType.FieldName);
            }
            set
            {
                this.SetString(MailLogSchema.MailType.FieldName, value);
            }
        }

        public override string TableName
        {
            get { return "MailLog"; }
        }

        #endregion

        #region String Properties

        public virtual string s_MailLogId
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.MailLogId.FieldName) ? string.Empty : base.GetIntegerAsString(MailLogSchema.MailLogId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.MailLogId.FieldName);
                else
                    this.MailLogId = base.SetIntegerAsString(MailLogSchema.MailLogId.FieldName, value);
            }
        }

        public virtual string s_LocationId
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.LocationId.FieldName) ? string.Empty : base.GetIntegerAsString(MailLogSchema.LocationId.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.LocationId.FieldName);
                else
                    this.LocationId = base.SetIntegerAsString(MailLogSchema.LocationId.FieldName, value);
            }
        }

        public virtual string s_SendDate
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.SendDate.FieldName) ? string.Empty : base.GetDateTimeAsString(MailLogSchema.SendDate.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.SendDate.FieldName);
                else
                    this.SendDate = base.SetDateTimeAsString(MailLogSchema.SendDate.FieldName, value);
            }
        }

        public virtual string s_MailTo
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.MailTo.FieldName) ? string.Empty : base.GetStringAsString(MailLogSchema.MailTo.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.MailTo.FieldName);
                else
                    this.MailTo = base.SetStringAsString(MailLogSchema.MailTo.FieldName, value);
            }
        }

        public virtual string s_MailFrom
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.MailFrom.FieldName) ? string.Empty : base.GetStringAsString(MailLogSchema.MailFrom.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.MailFrom.FieldName);
                else
                    this.MailFrom = base.SetStringAsString(MailLogSchema.MailFrom.FieldName, value);
            }
        }

        public virtual string s_Subject
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.Subject.FieldName) ? string.Empty : base.GetStringAsString(MailLogSchema.Subject.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.Subject.FieldName);
                else
                    this.Subject = base.SetStringAsString(MailLogSchema.Subject.FieldName, value);
            }
        }

        public virtual string s_Message
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.Message.FieldName) ? string.Empty : base.GetStringAsString(MailLogSchema.Message.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.Message.FieldName);
                else
                    this.Message = base.SetStringAsString(MailLogSchema.Message.FieldName, value);
            }
        }

        public virtual string s_MailType
        {
            get
            {
                return this.IsColumnNull(MailLogSchema.MailType.FieldName) ? string.Empty : base.GetStringAsString(MailLogSchema.MailType.FieldName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(MailLogSchema.MailType.FieldName);
                else
                    this.MailType = base.SetStringAsString(MailLogSchema.MailType.FieldName, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter MailLogId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.MailLogId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter LocationId
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.LocationId);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter SendDate
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.SendDate);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter MailTo
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.MailTo);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter MailFrom
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.MailFrom);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Subject
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.Subject);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter Message
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.Message);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }

                public WhereParameter MailType
                {
                    get
                    {
                        WhereParameter wp = new WhereParameter(MailLogSchema.MailType);
                        this._clause._entity.Query.AddWhereParameter(wp);
                        return wp;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter MailLogId
            {
                get
                {
                    if (_MailLogId_W == null)
                    {
                        _MailLogId_W = TearOff.MailLogId;
                    }
                    return _MailLogId_W;
                }
            }

            public WhereParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public WhereParameter SendDate
            {
                get
                {
                    if (_SendDate_W == null)
                    {
                        _SendDate_W = TearOff.SendDate;
                    }
                    return _SendDate_W;
                }
            }

            public WhereParameter MailTo
            {
                get
                {
                    if (_MailTo_W == null)
                    {
                        _MailTo_W = TearOff.MailTo;
                    }
                    return _MailTo_W;
                }
            }

            public WhereParameter MailFrom
            {
                get
                {
                    if (_MailFrom_W == null)
                    {
                        _MailFrom_W = TearOff.MailFrom;
                    }
                    return _MailFrom_W;
                }
            }

            public WhereParameter Subject
            {
                get
                {
                    if (_Subject_W == null)
                    {
                        _Subject_W = TearOff.Subject;
                    }
                    return _Subject_W;
                }
            }

            public WhereParameter Message
            {
                get
                {
                    if (_Message_W == null)
                    {
                        _Message_W = TearOff.Message;
                    }
                    return _Message_W;
                }
            }

            public WhereParameter MailType
            {
                get
                {
                    if (_MailType_W == null)
                    {
                        _MailType_W = TearOff.MailType;
                    }
                    return _MailType_W;
                }
            }

            private WhereParameter _MailLogId_W = null;
            private WhereParameter _LocationId_W = null;
            private WhereParameter _SendDate_W = null;
            private WhereParameter _MailTo_W = null;
            private WhereParameter _MailFrom_W = null;
            private WhereParameter _Subject_W = null;
            private WhereParameter _Message_W = null;
            private WhereParameter _MailType_W = null;

            public void WhereClauseReset()
            {
                _MailLogId_W = null;
                _LocationId_W = null;
                _SendDate_W = null;
                _MailTo_W = null;
                _MailFrom_W = null;
                _Subject_W = null;
                _Message_W = null;
                _MailType_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private EasyObject _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(EasyObject entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter MailLogId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.MailLogId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter LocationId
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.LocationId);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter SendDate
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.SendDate);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter MailTo
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.MailTo);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter MailFrom
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.MailFrom);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Subject
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.Subject);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter Message
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.Message);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }

                public AggregateParameter MailType
                {
                    get
                    {
                        AggregateParameter ap = new AggregateParameter(MailLogSchema.MailType);
                        this._clause._entity.Query.AddAggregateParameter(ap);
                        return ap;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter MailLogId
            {
                get
                {
                    if (_MailLogId_W == null)
                    {
                        _MailLogId_W = TearOff.MailLogId;
                    }
                    return _MailLogId_W;
                }
            }

            public AggregateParameter LocationId
            {
                get
                {
                    if (_LocationId_W == null)
                    {
                        _LocationId_W = TearOff.LocationId;
                    }
                    return _LocationId_W;
                }
            }

            public AggregateParameter SendDate
            {
                get
                {
                    if (_SendDate_W == null)
                    {
                        _SendDate_W = TearOff.SendDate;
                    }
                    return _SendDate_W;
                }
            }

            public AggregateParameter MailTo
            {
                get
                {
                    if (_MailTo_W == null)
                    {
                        _MailTo_W = TearOff.MailTo;
                    }
                    return _MailTo_W;
                }
            }

            public AggregateParameter MailFrom
            {
                get
                {
                    if (_MailFrom_W == null)
                    {
                        _MailFrom_W = TearOff.MailFrom;
                    }
                    return _MailFrom_W;
                }
            }

            public AggregateParameter Subject
            {
                get
                {
                    if (_Subject_W == null)
                    {
                        _Subject_W = TearOff.Subject;
                    }
                    return _Subject_W;
                }
            }

            public AggregateParameter Message
            {
                get
                {
                    if (_Message_W == null)
                    {
                        _Message_W = TearOff.Message;
                    }
                    return _Message_W;
                }
            }

            public AggregateParameter MailType
            {
                get
                {
                    if (_MailType_W == null)
                    {
                        _MailType_W = TearOff.MailType;
                    }
                    return _MailType_W;
                }
            }

            private AggregateParameter _MailLogId_W = null;
            private AggregateParameter _LocationId_W = null;
            private AggregateParameter _SendDate_W = null;
            private AggregateParameter _MailTo_W = null;
            private AggregateParameter _MailFrom_W = null;
            private AggregateParameter _Subject_W = null;
            private AggregateParameter _Message_W = null;
            private AggregateParameter _MailType_W = null;

            public void AggregateClauseReset()
            {
                _MailLogId_W = null;
                _LocationId_W = null;
                _SendDate_W = null;
                _MailTo_W = null;
                _MailFrom_W = null;
                _Subject_W = null;
                _Message_W = null;
                _MailType_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private EasyObject _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion
    }
}